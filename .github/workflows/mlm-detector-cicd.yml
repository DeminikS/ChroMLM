name: MLM Detector CI/CD

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

jobs:
  extension-lint:
    name: Chrome Extension Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          cd ChroMLM
          npm install eslint --save-dev
          npm install
          
      - name: Run ESLint
        run: |
          cd ChroMLM
          npx eslint . || echo "Linting issues found"
          
  backend-lint:
    name: Python Backend Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          cd Server
          pip install -r requirements.txt
          
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 Server --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 Server --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
  extension-test:
    name: Chrome Extension Testing
    needs: extension-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          cd ChroMLM
          npm install jest --save-dev
          npm install
          
      - name: Run tests
        run: |
          cd ChroMLM
          # Skip tests if no test files are found
          if find . -name '*.test.js' -o -name '*.spec.js' | grep -q .; then
            npx jest
          else
            echo "No test files found, skipping tests"
          fi
          
  backend-test:
    name: Python Backend Testing
    needs: backend-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio
          cd Server
          pip install -r requirements.txt
          
      - name: Run tests
        run: |
          cd Server
          # Skip tests if no test files are found
          if find . -name 'test_*.py' | grep -q .; then
            pytest
          else
            echo "No test files found, skipping tests"
          fi
          
  extension-build:
    name: Build Chrome Extension
    needs: extension-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development')
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          cd ChroMLM
          npm install
          
      - name: Build extension
        run: |
          cd ChroMLM
          mkdir -p dist
          # Copy files instead of webpack, since we don't see a build script
          cp -r manifest.json background content popup dist/
          
      - name: Package Chrome Extension
        run: |
          cd ChroMLM/dist
          zip -r ../chromlm-extension.zip .
          
      - name: Upload extension artifact
        uses: actions/upload-artifact@v3
        with:
          name: chromlm-extension
          path: ChroMLM/chromlm-extension.zip
          
  backend-build:
    name: Build Backend
    needs: backend-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development')
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd Server
          pip install -r requirements.txt
          
      - name: Create package
        run: |
          mkdir -p Server/dist
          cd Server
          # Create a virtual environment for deployment
          python -m venv venv
          . venv/bin/activate
          pip install -r requirements.txt
          # Package the application
          tar -czf dist/server-package.tar.gz src requirements.txt
          
      - name: Upload backend artifact
        uses: actions/upload-artifact@v3
        with:
          name: server-package
          path: Server/dist/server-package.tar.gz

  # Add deployment job if needed
  deploy-dev:
    name: Deploy to Development
    needs: [extension-build, backend-build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/development'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Display structure of downloaded files
        run: ls -R
        
      # Add your deployment steps for development environment
      # This is a placeholder - implement actual deployment steps based on your hosting solution
      - name: Deploy to development environment
        run: |
          echo "Deploying to development environment"
          # Add deployment commands for your specific hosting platform
          
  deploy-prod:
    name: Deploy to Production
    needs: [extension-build, backend-build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Display structure of downloaded files
        run: ls -R
        
      # Add your deployment steps for production environment
      # This is a placeholder - implement actual deployment steps based on your hosting solution
      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment"
          # Add deployment commands for your specific hosting platform